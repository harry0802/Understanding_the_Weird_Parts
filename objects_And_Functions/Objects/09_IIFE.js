/*
    * 立即呼叫函數表達式 （immediately invoked function expression）iife
    * 我們可以對函數做一些特別的事情，讓他成為特殊的物件，他有程式屬性可以呼叫他
    * 
*/ 

function fn(){
    console.log('函數陳述句')
}
fn();

/*
    一開始並不會被放進記憶體，而當讀取到這行的時候，會創建一個函數物件，然後我們可以利用指向他物件記憶體位址，的變數呼叫他。

*/ 
var fn1 = function(){
    console.log('函數表達式')
}
/*
    立即呼叫函數表達式：
    * 在創造時呼叫函數，fn2 後面的函數表達式會創建一個函數物件，而緊跟函數後面的括號，則會讓函數對象在創建完時，就會馬上執行。
    * 一般的函數表達式： 輸出的就會是函數或函數裡面的程式碼
    * 立即呼叫函數表達式：函數物件會被函數表達式創建，然後被立即執行，而這個值會被回傳成為該函數。
       所以當在全域環境下，輸出指向物件記憶體位址的變數並調用時，會輸出立即呼叫函數表達式回傳的值 
        return 'hello' + name 
    * 所以這個時候的變數已經是一個字串的值，（看回傳的是什麼值變數就是什麼值）
*/ 
var fn2 = function(name){
    return 'hello ' + name 
}('我是被回傳的值')//將函數對象回傳的值賦值給變量
console.log(fn2);//輸出他的值，因為已經不是函數所以當你呼叫時就會出錯

/*
    如何讓語法解析器理解不讓函數成為陳述句？
    * 確保 function不是程式碼第一個字，如果不是第一個字就不會報錯，與法解析器就會判定這並不是一個函數陳述句
      因為函數陳述句需要 function 成為第一個字
    * 最簡單的就是把函數包進去括號裡 ()
    * () 在ＪＳ裡面是一個運算子，大多括號都用在表達式，而ＪＳ知道在（）裡面的東西一定是表達式
      他會假設我們括號裡面的函數正在創建一個函數物件。
    * 他也是一種立即執行函數表達式，所以我們也可以呼叫他，再創建時立刻呼叫
      
      創造函數對象立殼執行它
       
*/ 

(function(name) {
    var say = '嗨';
    console.log(say+' '+name);    
}('小心上面沒有加分號'))