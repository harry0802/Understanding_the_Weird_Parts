/**/
/**/

/* 
    * 建立物件不同的方法 *

    並不是改變物件本身的功能，而是用一些方式在ＪＳ中建立物件。
    函數建構子 new:
    用 new 建立新物件， 為了建立物件我們需要給他屬性與方法，並設定原型。

*/
function fn() {
  console.log(this);
  this.firstName = "A";
  this.lastName = "b";
  this.arr = [];
  console.log("AVA");
}
// 把 new 放在函數前面，設定 this 回傳到新物件，就算我們沒設定 return 他也不會回傳 undefined,只會回傳 空物件，或使用 this設定的東西（真棒）
const obj = new fn();

/*  
    const obj = new fn();
    * new 會建立新的空物件，然後會呼叫函數，當函數被呼叫時，執行環境會產生this 給我們。

    * 因為我們用了 new 產生物件，所以this 就會指向我們新產生的物件記憶體位置。
      所以我函數裡面有 使用 this方法的值，就會指向空的物件。

    * 當我們使用 new 運算子時，他不會回傳值，js會回傳被 new 運算子建立的物件 
        所以這個 新物件，呼叫函數只要是有使用this關鍵字的值，就會回傳到 new 創建的物件裡面
    
    * 當我們如果手動加上 return 他就只會回傳我們手動加上去的值，變成函數回傳的東西，
        如果我們沒有加上 returu 那麼，js 就會給我們 this 變數設定好的物件，在執行環境被創造，函數執行之前

    * 所以 new 可以讓我們用函數建立一個物件，我們可以利用呼叫函數來專門建立一個物件，
      當我們想用一個函數建立多的不同屬性名與值的物件時，就可以使用函數建構子。    
     （傳入參數） 
     並設定 this.變數名 = 參數
     這樣我們就可以透過多次呼叫，創建多個屬性名一樣屬性值不一樣的物件，而這些物件雖然出自同一個函數但彼此並不相干

   * 用函數建立物件，這就是函數建構子。
     他依然會呼叫函數，沒有不同，只是放了 new 關鍵字在前面，會改變 this 和回傳的東西。

     *函數建構子*
    一個正常的函數用來建立物件，當我們在呼叫函數前加上 new 關鍵字，在執行環境階段被產生的 this 變數，會指向新的變數
    當函數被結束時，該物件會被自動回傳。

    * new 運算子 創造新物件，函數建構子用來增加新物件的屬性方法。





*/
console.log(obj);

function Fn2(firstName, lastName) {
  this.first = firstName;
  this.last = lastName;
}

const obj2 = new Fn2("胖虎", "小夫");

console.log(obj2);
